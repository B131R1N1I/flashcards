@page "/login"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager

<style>
    .failed {
        width: 80%;
        margin-top: 50px;
        height: 100px;
        align-items: center;
        justify-content: center;
        color: red;
    }
</style>

Login: <br>
<input type="text" name="login" id="login" @bind-value="login" />
<br>
Password: <br>
<input type="text" name="password" id="password" @bind-value="password" />
<br>
<button class="btn btn-primary" @onclick="LoginRequest">Log in</button>
@CheckConnectionMessage
<div hidden=@hideFailed class="failed">Authorization has failed. Wrong login and/or password</div>

@code {
    string login, password;
    RenderFragment CheckConnectionMessage;
    bool hideFailed { get; set; } = true;
    void OnLoginFailed()
    {
        hideFailed = false;
    }
    async void LoginRequest()
    {
        var postBody = new LoginRequest { login = login, password = password };
        try
        {
            using (var tokenResponse = await Http.PostAsJsonAsync<LoginRequest>($"{@MyConstatns.serverAddress}/user/login",
            postBody))
            {
                if (tokenResponse.StatusCode == HttpStatusCode.OK)
                {
                    var localToken = (await tokenResponse.Content.ReadFromJsonAsync<TokenResponse>()).token;
                    await localStorage.SetItemAsync<string>("token", localToken);
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await
                    localStorage.GetItemAsync<string>("token"));
                    using (var userDataResponse = await Http.GetAsync($"{@MyConstatns.serverAddress}/user/getMe"))
                    {
                        var localUser = await userDataResponse.Content.ReadFromJsonAsync<LocalUser>();
                        await localStorage.SetItemAsync<LocalUser>("localUser", localUser);
                        NavManager.NavigateTo("/");
                    }
                }
                else
                {
                    OnLoginFailed();
                }
            }
        }
        catch (HttpRequestException e)
        {
            if (e.Message.Contains("Failed to fetch"))
                CheckConnectionMessage = @<p><br />Check your connection and try again...</p>;
        }

        StateHasChanged();

    }
}